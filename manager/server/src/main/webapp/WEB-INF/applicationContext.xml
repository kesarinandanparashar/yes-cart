<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2009 Igor Azarnyi, Denys Pavlov
  ~
  ~    Licensed under the Apache License, Version 2.0 (the "License");
  ~    you may not use this file except in compliance with the License.
  ~    You may obtain a copy of the License at
  ~
  ~        http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~    Unless required by applicable law or agreed to in writing, software
  ~    distributed under the License is distributed on an "AS IS" BASIS,
  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~    See the License for the specific language governing permissions and
  ~    limitations under the License.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/security
                           http://www.springframework.org/schema/security/spring-security.xsd">




    <security:http entry-point-ref="entryPoint">
        <security:anonymous enabled="false"/>
    </security:http>

    <bean id="entryPoint"
          class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint"/>

    <security:authentication-manager>
        <security:authentication-provider>
            <security:password-encoder hash="md5"/>
            <security:jdbc-user-service
                    data-source-ref="dataSourceSec"
                    group-authorities-by-username-query=""
                    users-by-username-query="SELECT m.email as username, m.password, 1 as enabled FROM TMANAGER m where m.email = ?"
                    authorities-by-username-query="SELECT mr.email as username, mr.code as authority FROM TMANAGERROLE mr  WHERE mr.email = ?"/>
        </security:authentication-provider>
    </security:authentication-manager>


    <bean id="dataSourceSec" class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName" value="java:comp/env/jdbc/yesjndi"/>
        <property name="lookupOnStartup" value="true"/>
        <property name="cache" value="true"/>
        <property name="proxyInterface" value="javax.sql.DataSource"/>
    </bean>



    <!-- #################################  aspects configurations begin ######################################-->

    <bean id="aspectExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"/>


    <bean id="managerRegistrationAspect" class="org.yes.cart.service.domain.aspect.impl.ManagerRegistrationAspect">
        <constructor-arg ref="aspectExecutor"/>
        <constructor-arg index="1">
            <bean class="org.yes.cart.service.domain.impl.PassPhraseGeneratorImpl">
                <constructor-arg index="0" value="8"/>
            </bean>
        </constructor-arg>
        <constructor-arg index="2">
            <bean class="org.yes.cart.service.domain.impl.MD5HashHelperImpl"/>
        </constructor-arg>
        <constructor-arg index="3" ref="mailService"/>
        <constructor-arg index="4" ref="mailComposer"/>
    </bean>


    <bean id="paymentNotificationAspect" class="org.yes.cart.service.domain.aspect.impl.PaymentAspect">
        <constructor-arg index="0" ref="aspectExecutor"/>
        <constructor-arg index="1" ref="productService"/>
        <constructor-arg index="2" type="org.yes.cart.service.domain.MailService" ref="mailService"/>
        <constructor-arg index="3" type="org.yes.cart.service.mail.MailComposer" ref="mailComposer"/>
        <constructor-arg index="4" type="org.yes.cart.service.domain.CustomerService" ref="customerService"/>
        <constructor-arg index="5" type="org.yes.cart.service.domain.ShopService" ref="shopService"/>
        <constructor-arg index="6" type="org.yes.cart.service.theme.ThemeService" ref="themeService"/>
        <constructor-arg index="7" type="org.yes.cart.service.payment.PaymentModulesManager" ref="paymentModulesManager"/>
        <property name="authoriseShopperTemplates">
            <map>
                <entry key="Ok" value="payment"/>
            </map>
        </property>
        <property name="authoriseAdminTemplates">
            <map>
                <entry key="Ok" value="adm-payment"/>
                <entry key="Processing" value="adm-payment"/>
                <entry key="Failed" value="adm-payment-failed"/>
                <entry key="Manual processing required" value="adm-payment-failed"/>
            </map>
        </property>
        <property name="cancelShopperTemplates">
            <map/>
        </property>
        <property name="cancelAdminTemplates">
            <map>
                <entry key="Ok" value="adm-refund"/>
                <entry key="Processing" value="adm-refund"/>
                <entry key="Failed" value="adm-refund-failed"/>
                <entry key="Manual processing required" value="adm-refund-failed"/>
            </map>
        </property>
        <property name="shipmentShopperTemplates">
            <map>
                <entry key="Ok" value="shipment-complete"/>
            </map>
        </property>
        <property name="shipmentAdminTemplates">
            <map>
                <entry key="Ok" value="adm-payment-shipped"/>
                <entry key="Processing" value="adm-payment-shipped"/>
                <entry key="Failed" value="adm-payment-shipped-failed"/>
                <entry key="Manual processing required" value="adm-payment-shipped-failed"/>
            </map>
        </property>
    </bean>

    <bean id="orderStateChangeAspect" class="org.yes.cart.service.domain.aspect.impl.OrderStateChangeListenerAspect">
        <constructor-arg ref="aspectExecutor"/>
        <constructor-arg index="1" type="org.yes.cart.service.domain.MailService" ref="mailService"/>
        <constructor-arg index="2" type="org.yes.cart.service.mail.MailComposer" ref="mailComposer"/>
        <constructor-arg index="3" type="org.yes.cart.service.domain.CustomerService" ref="customerService"/>
        <constructor-arg index="4" type="org.yes.cart.service.domain.CustomerOrderService" ref="customerOrderService"/>
        <constructor-arg index="5" type="org.yes.cart.service.domain.ShopService" ref="shopService"/>
        <constructor-arg index="6" type="org.yes.cart.service.theme.ThemeService" ref="themeService"/>
        <constructor-arg index="7" type="org.yes.cart.service.domain.ProductSkuService" ref="productSkuService"/>
        <constructor-arg index="8">
            <map>
                <entry key="evt.pending-os.waiting" value="order-new"/>
                <entry key="evt.pending-os.waiting.payment" value="order-new"/>
                <entry key="evt.pending-os.in.progress" value="order-new"/>

                <entry key="evt.new.order.cancel.refund-os.cancelled" value="order-canceled"/>
                <entry key="evt.new.order.cancel.refund-os.cancelled.waiting.payment" value="order-canceled"/>

                <entry key="evt.payment.confirmed-os.in.progress" value="order-confirmed"/>

                <entry key="evt.packing.complete-os.in.progress-ds.shipment.ready" value="order-delivery-readytoshipping"/>
                <entry key="evt.packing.complete-os.partially.shipped-ds.shipment.ready" value="order-delivery-readytoshipping"/>
                <entry key="evt.release.to.shipment-os.in.progress-ds.shipment.ready.waiting.payment" value="order-delivery-readytoshipping"/>
                <entry key="evt.release.to.shipment-os.partially.shipped-ds.shipment.ready.waiting.payment" value="order-delivery-readytoshipping"/>

                <entry key="evt.release.to.shipment-os.in.progress-ds.shipment.inprogress" value="order-delivery-shipped"/>
                <entry key="evt.release.to.shipment-os.partially.shipped-ds.shipment.inprogress" value="order-delivery-shipped"/>
                <entry key="evt.release.to.shipment-os.in.progress-ds.shipment.inprogress.waiting.payment" value="order-delivery-shipped"/>
                <entry key="evt.release.to.shipment-os.partially.shipped-ds.shipment.inprogress.waiting.payment" value="order-delivery-shipped"/>

                <entry key="evt.shipment.complete-os.partially.shipped-ds.shipped" value="order-shipping-completed"/>
                <entry key="evt.shipment.complete-os.completed-ds.shipped" value="order-shipping-completed"/>

                <entry key="evt.order.cancel-os.cancelled" value="order-canceled"/>
                <entry key="evt.order.cancel.refund-os.cancelled" value="order-canceled"/>
                <entry key="evt.order.cancel.refund-os.returned" value="order-returned"/>
            </map>
        </constructor-arg>
        <constructor-arg index="9">
            <map>
                <entry key="evt.pending-os.waiting" value="adm-order-wait-confirmation"/>
                <entry key="evt.pending-os.waiting.payment" value="adm-order-new"/>
                <entry key="evt.pending-os.in.progress" value="adm-order-new"/>

                <entry key="evt.new.order.cancel.refund-os.cancelled" value="adm-order-canceled"/>
                <entry key="evt.new.order.cancel.refund-os.cancelled.waiting.payment" value="adm-order-canceled"/>

                <entry key="evt.payment.confirmed-os.in.progress" value="adm-order-confirmed"/>
                <entry key="evt.payment.processed-os.in.progress" value="adm-order-payment-confirmed"/>

                <entry key="evt.process.allocation-os.in.progress-ds.inventory.allocated" value="adm-order-delivery-allocated"/>
                <entry key="evt.process.allocation-os.partially.shipped-ds.inventory.allocated" value="adm-order-delivery-allocated"/>
                <entry key="evt.delivery.allowed.quantity-os.in.progress-ds.inventory.allocated" value="adm-order-delivery-allocated"/>
                <entry key="evt.delivery.allowed.quantity-os.partially.shipped-ds.inventory.allocated" value="adm-order-delivery-allocated"/>

                <entry key="evt.release.to.pack-os.in.progress-ds.packing" value="adm-order-delivery-packing"/>
                <entry key="evt.release.to.pack-os.partially.shipped-ds.packing" value="adm-order-delivery-packing"/>

                <entry key="evt.packing.complete-os.in.progress-ds.shipment.ready" value="adm-order-delivery-ready"/>
                <entry key="evt.packing.complete-os.partially.shipped-ds.shipment.ready" value="adm-order-delivery-ready"/>

                <entry key="evt.release.to.shipment-os.in.progress-ds.shipment.ready.waiting.payment" value="adm-order-delivery-ready-wait"/>
                <entry key="evt.release.to.shipment-os.partially.shipped-ds.shipment.ready.waiting.payment" value="adm-order-delivery-ready-wait"/>

                <entry key="evt.release.to.shipment-os.in.progress-ds.shipment.inprogress" value="adm-order-delivery-inprogress"/>
                <entry key="evt.release.to.shipment-os.partially.shipped-ds.shipment.inprogress" value="adm-order-delivery-inprogress"/>

                <entry key="evt.release.to.shipment-os.in.progress-ds.shipment.inprogress.waiting.payment" value="adm-order-delivery-inprogress-wait"/>
                <entry key="evt.release.to.shipment-os.partially.shipped-ds.shipment.inprogress.waiting.payment" value="adm-order-delivery-inprogress-wait"/>

                <entry key="evt.shipment.complete-os.partially.shipped-ds.shipped" value="adm-order-shipping-completed"/>
                <entry key="evt.shipment.complete-os.completed-ds.shipped" value="adm-order-shipping-completed"/>

                <entry key="evt.order.cancel-os.cancelled" value="adm-order-canceled"/>
                <entry key="evt.order.cancel.refund-os.cancelled" value="adm-order-canceled"/>
                <entry key="evt.order.cancel.refund-os.returned" value="adm-order-returned"/>
            </map>
        </constructor-arg>
    </bean>



    <!-- #################################  aspects configurations end ######################################-->

    <!-- ################################ Clustering begin ###################################### -->


    <bean id="nodeService" class="org.yes.cart.web.service.ws.node.impl.NodeServiceImpl">
        <constructor-arg index="0" ref="systemService"/>
        <constructor-arg index="1" ref="runtimeAttributeService"/>
    </bean>

    <!-- ################################ Clustering end ######################################## -->


    <!-- #################################  message consumers begin ######################################-->

    <import resource="classpath*:manager-mailconfig.xml"/>

    <!-- #################################  message consumers end ######################################-->


    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
          autowire="byName">
        <property name="configLocation" value="classpath:hibernate-nc.cfg.xml"/>
        <property name="mappingResources">
            <list>
                <value>hibernate/yc.xml</value>
            </list>
        </property>
        <property name="entityInterceptor">
            <bean class="org.yes.cart.domain.interceptor.AdminInterceptor">
                <property name="entityOperationCache" ref="evictionConfig"/>
                <property name="prohibitedFields">
                    <map key-type="java.lang.String" value-type="java.lang.String">
                        <entry key="CustomerEntity">
                            <set>
                                <value>password</value>
                            </set>
                        </entry>
                        <entry key="ManagerEntity">
                            <set>
                                <value>password</value>
                            </set>
                        </entry>
                        <entry key="MailEntity">
                            <set>
                                <value>textVersion</value>
                                <value>htmlVersion</value>
                            </set>
                        </entry>
                        <entry key="MailPartEntity">
                            <set>
                                <value>data</value>
                            </set>
                        </entry>
                        <entry key="ShoppingCartStateEntity">
                            <set>
                                <value>state</value>
                            </set>
                        </entry>
                    </map>
                </property>
            </bean>
        </property>
        <property name="hibernateProperties">
            <props>
		        <prop key="hibernate.search.default.indexBase">
                    #{systemProperties['java.io.tmpdir']+systemProperties['file.separator']+'yes-cart-yum'}
                </prop>
                <prop key="hibernate.search.default.exclusive_index_use">false</prop>
                <!-- Disable hibernate search automatic support - since we do not have FT index in YUM -->
                <prop key="hibernate.search.autoregister_listeners">false</prop>
                <prop key="hibernate.search.indexing_strategy">manual</prop>
            </props>
        </property>
    </bean>

    <bean id="productReindexer" class="org.yes.cart.domain.entityindexer.impl.EmptyProductIndexerImpl"/>


    <import resource="classpath*:core-config.xml"/>
    <import resource="classpath*:core-persistence.xml"/>
    <import resource="classpath*:core-io.xml"/>
    <import resource="classpath*:core-services.xml"/>
    <import resource="classpath*:core-services-commands.xml"/>

    <import resource="classpath*:payment-persistence.xml"/>
    <import resource="classpath*:payment-api.xml"/>
    <import resource="classpath*:core-module-payment-base.xml"/>
    <import resource="classpath*:core-module-payment-capp.xml"/>
    <import resource="classpath*:core-module-payment-gswm.xml"/>


</beans>
